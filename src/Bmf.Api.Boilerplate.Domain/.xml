<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bmf.Api.Boilerplate.Domain</name>
    </assembly>
    <members>
        <member name="T:Bmf.Api.Boilerplate.Domain.Abstractions.Error">
            <summary>
            Canonical error with code + message.
            </summary>
        </member>
        <member name="M:Bmf.Api.Boilerplate.Domain.Abstractions.Error.#ctor(System.String,System.String)">
            <summary>
            Canonical error with code + message.
            </summary>
        </member>
        <member name="T:Bmf.Api.Boilerplate.Domain.Abstractions.Result">
            <summary>
            Lightweight result type for success/failure flows without exceptions.
            </summary>
        </member>
        <member name="T:Bmf.Api.Boilerplate.Domain.Abstractions.Result`1">
            <summary>
            Result with a payload when successful.
            </summary>
        </member>
        <member name="M:Bmf.Api.Boilerplate.Domain.Abstractions.Result`1.UnwrapOrThrow">
            <summary>
            Returns the value or throws when failed (use sparingly).
            </summary>
        </member>
        <member name="T:Bmf.Api.Boilerplate.Domain.Primitives.AggregateRoot`1">
            <summary>
            Aggregate root maintains pending domain events.
            </summary>
        </member>
        <member name="M:Bmf.Api.Boilerplate.Domain.Primitives.AggregateRoot`1.#ctor(`0)">
            <summary>
            Aggregate root maintains pending domain events.
            </summary>
        </member>
        <member name="M:Bmf.Api.Boilerplate.Domain.Primitives.AggregateRoot`1.Raise(Bmf.Api.Boilerplate.Domain.Primitives.IDomainEvent)">
            <summary>
            Record a new event to be dispatched transactionally.
            </summary>
        </member>
        <member name="M:Bmf.Api.Boilerplate.Domain.Primitives.AggregateRoot`1.ClearDomainEvents">
            <summary>
            Clear all pending events (after persistence).
            </summary>
        </member>
        <member name="T:Bmf.Api.Boilerplate.Domain.Primitives.Entity`1">
            <summary>
            Base type for entities.
            </summary>
        </member>
        <member name="M:Bmf.Api.Boilerplate.Domain.Primitives.Entity`1.#ctor(`0)">
            <summary>
            Base type for entities.
            </summary>
        </member>
        <member name="T:Bmf.Api.Boilerplate.Domain.Primitives.IDomainEvent">
            <summary>
            Marker for domain events emitted by aggregates.
            </summary>
        </member>
        <member name="T:Bmf.Api.Boilerplate.Domain.Primitives.StronglyTypedId`1">
            <summary>
            Base for Guid-backed strongly-typed IDs as reference-type records.
            Example: <c>public sealed record OrderId(Guid Value) : StronglyTypedId&lt;OrderId&gt;(Value);</c>
            </summary>
        </member>
        <member name="M:Bmf.Api.Boilerplate.Domain.Primitives.StronglyTypedId`1.#ctor(System.Guid)">
            <summary>
            Base for Guid-backed strongly-typed IDs as reference-type records.
            Example: <c>public sealed record OrderId(Guid Value) : StronglyTypedId&lt;OrderId&gt;(Value);</c>
            </summary>
        </member>
        <member name="T:Bmf.Api.Boilerplate.Domain.Time.IClock">
            <summary>
            Abstract time source for testability.
            </summary>
        </member>
        <member name="T:Bmf.Api.Boilerplate.Domain.Time.SystemClock">
            <summary>
            Production clock implementation.
            </summary>
        </member>
    </members>
</doc>
